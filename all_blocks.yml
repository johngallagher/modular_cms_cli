- type: MarketingHeroCoverImageWithCtas
  hide_from_nav: true
  heading: Understand your Rails app **in production**
  subheading: >-
    Stop guessing and understand what your Rails app is **actually doing** in
    production.
  left:
    heading: 3 February 2025
    subheading: >-
      6 Weeks Workshop. Hands On And Practical. No DevOps Experience Needed.
      Less Than 4 Hours A Week. Designed For Seniors And Leads. Solo Or Team
      Workshops.
    cta:
      text: Buy For Team
      url: 'https://buy.stripe.com/dR6eVPeSk22X7YceUY'
  right:
    heading: '4 Hours A Week, 6 Weeks'
    subheading: >-
      A short timescale to transform the culture of observability in your
      team. No DevOps experience needed.
    cta:
      text: View Blog
      url: 'https://joyfulprogramming.com'
  image:
    url: 'https://images.unsplash.com/photo-1448932223592-d1fc686e76ea'
- type: FeatureSectionsCtaList
  library: FlowBite
  heading: Improve Observability
  hide_from_nav: true
  subheading: A few reasons why you should improve observability
  features:
    - heading: Fix Bugs Faster
      summary: >-
        Observability lets you catch issues the moment they happen. It's like
        having X-ray vision for your app, so you can fix problems before they
        mess with your users' experience. No more guessing games—just quick,
        effective solutions.
      icon: solid-wand-magic-sparkles
    - heading: Find Performance Bottlenecks
      summary: >-
        Observability helps you see where you can speed things up and make
        everything run smoother. Your users will notice the difference, and
        they'll keep coming back because they trust your app to perform.
      icon: solid-award
    - heading: 'Less Incidents, Less Stress'
      summary: >-
        Observability gives you the power to set alerts that warn you about
        potential issues before they blow up. It's like having a crystal ball
        for your app's health, letting you stay ahead of the game and keep
        everything running smoothly.
      icon: solid-badge-check
- type: FeatureSectionsIcons
  library: FlowBite
  heading: The Problems
  features:
    - heading: Diagnosing Incidents Takes Hours
      summary: >-
        Ever felt like you're chasing shadows? Debugging incidents without
        observability is just that. Imagine it's 2 AM - you're squinting at
        logs trying to figure out why your app just tanked. Not fun, right?
        Observability transforms your bug hunt into a guided tour. No more
        guesswork, just straight answers. And yes, you can actually sleep
        peacefully at night.
      icon: solid-clock
    - heading: App Health Is a Mystery
      summary: >-
        You're driving blindfolded. That's you managing a Rails app without
        observability. System health? A big question mark. CPU spikes, memory
        leaks, and you’re none the wiser until your app slows to a crawl—or
        worse, crashes.
      icon: solid-heart
    - heading: Improving Performance Is A Wild Goose Chase
      summary: >-
        Performance bottlenecks are sneaky, and without the right tools,
        they're nearly invisible. Trying to connect a profiler to a Rails app
        in production? Good luck with that. Even if you can figure out the
        slow areas of the app, without observability you can't accurately
        determine **why** they're slow.
      icon: solid-question-circle
    - heading: Background Jobs Are A Black Box
      summary: >-
        Those background jobs you rely on? They can fail silently and
        spectacularly. Without observability, you won’t know until it’s too
        late. Emails undelivered, reports half-baked—chaos ensues.
      icon: solid-inbox
- type: FeatureSectionsCardList
  library: FlowBite
  heading: What Do You Get?
  features:
    - heading: Tailored Strategy Blueprint
      summary: >-
        Over the 6 weeks you'll build a personalized, practical, step-by-step
        action plan designed for your observability needs.
    - heading: Steps To Observable Software
      summary: >-
        Master observability in just 4 hours a week — no DevOps experience
        required! Learn my simple 5-step process to boost software insights
        with ease.
    - heading: Rails Logging Showdown
      summary: >-
        Comparisons of the best Rails structured logging libraries. See how
        they compare to make an solid choice and avoid issues later.
    - heading: Bug Prioritization Worksheet
      summary: >-
        Stop wasting time on the wrong bugs! Use this actionable worksheet to
        identify the most business-critical issue you want to focus on in the
        workshop.
    - heading: No-Bankruptcy Blueprint
      summary: >-
        Maximize observability without breaking the bank. Follow this
        checklist to boost insights while keeping costs under control.
    - heading: Demystifying 3 Pillars
      summary: >-
        Get clarity on observability’s key pillars with this one-page guide.
        Cut through the vendor BS and finally understand traces, logs, and
        metrics.
    - heading: Query Like a Pro
      summary: >-
        Learn five powerful tips to supercharge your querying skills in any
        observability tool — become the data detective your team needs.
    - heading: Slack Channel Access
      summary: >-
        Ask any observability questions you have in the group Slack. We're
        here to support each other.
    - heading: Accountability Followups
      summary: >-
        Learning observability is fine, but if you don't take action, it's all
        pointless. I follow up with you every week to help you see real
        progress against the plan.
    - heading: Real Time Collaboration
      summary: >-
        Work directly with me in real time. Solve problems faster, get
        immediate feedback and move as one. Whether pairing or mobbing, your
        team will level up their skills and ship quality instrumentation
        quicker.
    - heading: Pull Requests
      summary: >-
        I’ll create Pull Requests asynchronously, so you can easily review
        them during our weekly calls. This ensures you're using our time
        together effectively. Access needed to your repos.
    - heading: Deep Context
      summary: >-
        I’ll dive into your business problems and domain, applying all my
        knowledge of observability to your specific challenges. This ensures
        solutions we create are aligned with your business goals for maximum
        impact.
- type: PricingTable
  library: FlowBite
  heading: Pricing Plans
  subheading: Flexible pricing for all teams and budgets.
  products:
    - id: prod_QYHXbnVYbPh22l
      payment_link_id: dR6eVPeSk22X7YceUY
    - id: prod_QUuRyxMMrbdtU8
      payment_link_id: 3cs4hb6lO3712DS7su
    - id: prod_QoTFxmHghfUeRo
      payment_link_id: 14k2935hK8rl1zObIN
- type: FaqSectionsAccordion
  library: FlowBite
  heading: Frequently Asked Questions
  subheading: >-
    Anxious about why this might not work for you or any of the details? Here
    are answers to questions you may have.
  questions:
    - question: When does the course start?
      answer: >-
        The next cohort starts on **Monday 28th October 2024**. There will be
        cohorts every few months so if you can't make those sessions, I can
        fit you on a later cohort.
    - question: What is the duration of the workshop?
      answer: |
        The workshop lasts for **6 weeks**.
    - question: What experience do I need?
      answer: >
        Suitable for **senior, lead and principle Ruby engineers**. If you're
        at a junior or mid level position, it may be information overload. You
        don't need any special DevOps experience or knowledge of any
        observability tool.
    - question: Do you offer refunds?
      answer: >
        **Yes.** If you aren't happy with your results from the 6 week course
        tell me why after the course is over and I'll happily refund you.


        For this to be valid you must have shown up for every session, put in
        the effort to apply the material to your real life problem and done
        all homework set for you. :)
    - question: Do I have to give you access to my codebase?
      answer: >
        Depends which plan you choose.


        **Solo Plan**: No codebase access needed. Solo is designed for you to
        try my services out in a low cost low risk way. I will need to know
        the details of the bug you've selected though so I can help you. How
        much you reveal to me is your call.


        **Team Plan:** I need codebase access so I can help your team debug
        and fix issues in real time. I'm happy to sign any NDA your team have.
        Part of the team plan includes me creating pull requests for you to
        show you a way of adding observability.
    - question: What's the difference between Solo and Team?
      answer: >
        In short, the speed and quality of the results you'll get.


        **Solo plan:** I'm relying on you to do all the work of building
        instrumentation. You'll be in group coaching sessions with other
        engineers. I will show you the guidelines you need to work within to
        get great results.


        **Team plan:** I give your team personalised support to achieve better
        results faster. We learn together as a group, which means all of your
        team benefits from the sessions. We use mobbing and pairing to achieve
        that with an emphasis on learning by writing code in your codebase. I
        familiarise myself with your business problem and domain.
    - question: What guarantees do you offer?
      answer: >-
        Good question!


        I guarantee that **if you show up and do the work as set**, you will
        come out of the 6 week workshop with **an actionable plan for fixing
        the biggest, hairiest, most important bug** your team is facing.


        Ideally we'll also have deployed code to move you towards that goal.
        Results will vary widely depending on the culture of the team, how
        long it takes to deploy and many other things beyond my control.